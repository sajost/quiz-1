<?php
// src/AppBundle/Repository/UserRepository.php
namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Validator\Constraints\Email;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserLoaderInterface {
	public function loadUserByUsername($username) {
		$qb = $this->createQueryBuilder ( 'u' )->select ( 'u' )->where ( 'u.username = :username' )->orWhere ( 'u.email = :email' )->setParameter ( 'username', $username )->setParameter ( 'email', $username );
		$user = $qb->getQuery ()->getOneOrNullResult ();
		
		if (null === $user) {
			$message = sprintf ( 'Unable to find an active admin AppBundle:User object identified by "%s".', $username );
			throw new UsernameNotFoundException ( $message );
		}
		return $user;
	}
	public function refreshUser(UserInterface $user) {
		$class = get_class ( $user );
		if (! $this->supportsClass ( $class )) {
			throw new UnsupportedUserException ( sprintf ( 'Instances of "%s" are not supported.', $class ) );
		}
		return $this->find ( $user->getId () );
	}
	public function supportsClass($class) {
		// return $class === 'AppBundle\Entity\User';
		return $this->getEntityName () === $class || is_subclass_of ( $class, $this->getEntityName () );
	}
	public function getActive() {
		//
		$delay = new \DateTime ();
		$delay->setTimestamp ( strtotime ( '2 minutes ago' ) );
		
		$qb = $this->createQueryBuilder ( 'u' )->where ( 'u.lastact > :delay' )->setParameter ( 'delay', $delay );
		
		return $qb->getQuery ()->getResult ();
	}
	
	/**
	 * @param unknown $username
	 * @return mixed|NULL|\Doctrine\DBAL\Driver\Statement
	 */
	public function getUserByUE($username) {
		$qb = $this->createQueryBuilder ( 'u' )->select ( 'u' )->where ( 'u.username = :username' )->orWhere ( 'u.email = :email' )->setParameter ( 'username', $username )->setParameter ( 'email', $username );
		return $qb->getQuery ()->getOneOrNullResult ();
	}
	
	/**
	 *
	 * @param $uname -
	 *        	username or Email
	 * @param $token -
	 *        	user-unid for activation
	 * @return \Doctrine\ORM\mixed
	 */
	public function getUserByActivation($uname, $token) {
		$qb = $this->createQueryBuilder ( 'u' )->select ( 'u' )->where ( 'u.username = :username' )->orWhere ( 'u.email = :email' )->andWhere ( 'u.unid = :unid' )->setParameter ( 'username', $uname )->setParameter ( 'email', $uname )->setParameter ( 'unid', $token );
		
		return $qb->getQuery ()->getOneOrNullResult ();
	}
	
	/**
	 *
	 * @param
	 *        	$username
	 * @return \Doctrine\ORM\mixed
	 */
	public function getUserByUsername($username) {
		$qb = $this->createQueryBuilder ( 'u' )->select ( 'u' )->where ( 'u.username = :username' )->setParameter ( 'username', $username );
		
		return $qb->getQuery ()->getOneOrNullResult ();
	}
	
	/**
	 *
	 * @param
	 *        	$email
	 * @return \Doctrine\ORM\mixed
	 */
	public function getUserByEmail($email) {
		$qb = $this->createQueryBuilder ( 'u' )->select ( 'u' )->where ( 'u.email = :email' )->setParameter ( 'email', $email );
		
		return $qb->getQuery ()->getOneOrNullResult ();
	}
	
	/**
	 *
	 * @param
	 *        	$password
	 * @return \Doctrine\ORM\mixed
	 */
	public function getUserByPassword($password) {
		$qb = $this->createQueryBuilder ( 'u' )->select ( 'u' )->where ( 'u.password = :password' )->setParameter ( 'password', $password );
		
		return $qb->getQuery ()->getOneOrNullResult ();
	}
	
	/**
	 *
	 * @param unknown $unid        	
	 * @return \Doctrine\ORM\mixed
	 */
	public function getUserByUNID($unid) {
		$qb = $this->createQueryBuilder ( 'u' )->select ( 'u' )->where ( 'u.unid = :unid' )->setParameter ( 'unid', $unid );
		
		return $qb->getQuery ()->getOneOrNullResult ();
	}
	
	/**
	 *
	 * @param unknown $unid - reset
	 * @return \Doctrine\ORM\mixed
	 */
	public function getUserByReset($reset) {
		$qb = $this->createQueryBuilder ( 'u' )->select ( 'u' )->where ( 'u.reset = :reset' )->setParameter ( 'reset', $reset );
	
		return $qb->getQuery ()->getOneOrNullResult ();
	}
}